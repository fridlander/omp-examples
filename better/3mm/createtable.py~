"""
This program will create the graph for a given benchmark.
It will sort the csv file lexigraphically and create the graph.
x-axis will have the directives while the y-axis will be the time.
"""
import pandas as pd
from plotnine import *
import os
import matplotlib

def fun(read):
    cwd = os.getcwd()
    name = cwd.split("/")[5]
    file = pd.read_csv(read)
    baseline = file.loc[file['directive'] == 'baseline']['objective'].values
    
    #print(target_teams)
    filetype = title=read.replace('.csv', '') # that will make lassen-clang-largeUM.csv to lassen-clang-largeUM

    txt = ""
    count_failed = len(file[file['objective'] == 1.7976931348623157e+308])
    file = file[file.objective != 1.7976931348623157e+308] #removes all the times that faild helps a lot when data set is extra large
    if count_failed > 0:
        txt = f"""\n \nThe number of failed runs was: {count_failed}"""

    target_teams = file.loc[file['directive'].str.contains("target teams", case=False, na=False)]
    target_teams_parallel = file.loc[file['directive'].str.contains("target teams distribute parallel for", case=False, na=False)]
    final = ggplot(file) + \
            theme_dark() + \
            theme(panel_grid_major = element_blank(), panel_grid_minor = element_blank()) + \
            geom_point(aes(x='directive', y='objective'), color = "#22FF00", size = 3) + \
            geom_hline(yintercept=float(baseline), linetype="dashed", color = "red") + \
            theme(axis_text_x = element_text(text = .5, angle = 90, hjust = 1), figure_size=(20, 8)) + \
            scale_y_continuous(trans = 'log2') + \
            labs(title = filetype +' ' + name + txt, x="Objective", y = "Time")

    if(len(target_teams) != 0):
        final = final + \
                geom_point(target_teams, aes(x='directive', y='objective'), color = "#FABB00", size = 3)                
    if(len(target_teams_parallel) !=0):
        final = final + \
                geom_point(target_teams_parallel, aes(x='directive', y='objective'), color = "#3DC6FF", size = 3)
##FABB00"
    #final + scale_colour_continuous()
    return ggsave(final, filetype+name+'.png') #lassen-clang-largeUM2mm.png


def strip(text):
    try:
        return " ".join(text.split())
    except AttributeError:
        return text

def sort(f):
    data = pd.read_table(f, sep=r',',names=['directive', 'objective','elapsed_sec'], converters = {'directive' : strip})
    sorted_df = data.sort_values('objective')[['directive', 'objective','elapsed_sec']]
    sorted_df = sorted_df[sorted_df.objective != 'objective']
    sorted_df.to_csv(f ,index=False) 

def main():
    print("1)lassen clang large \n2)lassen clang extralarge \n3)lassen xlc large \n4)lassen xlc extralarge \n5)pascal clang large \n6)pascal clang extralarge \n")
    print("7) Run all")
    value = input("Please enter a your choice:\n")
    
    lst = ["lassen-clang-largeUM.csv", "lassen-clang-extralargeUM.csv", "lassen-xl-largeUM.csv", "lassen-xl-extralargeUM.csv", "pascal-clang-largeUM.csv", "pascal-clang-extralargeUM.csv"]

    if(int(value) == 1):
        name = lst[0]
    elif(int(value) == 2):
        name = lst[1]
    elif(int(value) == 3):
        name = lst[2]
    elif(int(value) == 4):
        name = lst[3]
    elif(int(value) == 5):
        name = lst[4]
    elif(int(value) == 6):
        name = lst[5]
    elif(int(value) == 7):
        for name in lst:
            sort(name)
            #fun(name)
        return 0
    
    sort(name)
    fun(name)
    return 0

if __name__ == "__main__":
    main()
